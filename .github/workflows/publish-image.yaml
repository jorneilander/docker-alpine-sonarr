---
name: Publish Sonarr

on:
  repository_dispatch:
  push:
    paths:
      - "Dockerfile"
      - ".github/workflows/*"
  workflow_dispatch:
    inputs:
      SHELL_XTRACE_ENABLED:
        type: boolean
        default: false
        description: "Shell debugging"
  schedule:
    - cron: "0 4 * * *"

jobs:
  lint_repository:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        continue-on-error: true

  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and publish
        id: vars
        run: |
          set -o errexit
          [[ "${{ inputs.SHELL_XTRACE_ENABLED }}" = "true" ]] && set -o xtrace

          ALPINE_VERSION="latest"
          IMAGE_NAME=failfr8er/sonarr

          # Fetch Sonarr release information
          SONARR_RAW=$(curl -s https://services.sonarr.tv/v1/download/main)

          # Set Sonarr version
          SONARR_VERSION=$(jq -r '.version' <<< "${SONARR_RAW}")
          SONARR_VERSION_MAJOR="${SONARR_VERSION%%.*}"
          SONARR_VERSION_MINOR="${SONARR_VERSION%.*.*}"

          # Fetch Sonarr artifact
          SONARR_ARTIFACT_URL=$(echo "${SONARR_RAW}" | jq -r '.linux.manual.url')
          [[ -e "${SONARR_ARTIFACT_URL##*/}" ]] || wget --no-verbose "${SONARR_ARTIFACT_URL}"

          # Set option to push built image
          DOCKER_OUTPUT_TYPE="docker"
          [[ "${GITHUB_REF_NAME}" = "master" ]] && DOCKER_OUTPUT_TYPE="registry"

          # Output user relevant information
          echo "Building: ${IMAGE_NAME}:${SONARR_VERSION}"
          echo "Tags: ['latest', '${SONARR_VERSION}', '${SONARR_VERSION_MAJOR}', ${SONARR_VERSION_MINOR}']"

          echo "SONARR_VERSION=${SONARR_VERSION}" >> $GITHUB_OUTPUT

          docker buildx build \
            --file Dockerfile \
            --cache-from=type="local,src=/tmp/.buildx-cache" \
            --cache-to=type="local,dest=/tmp/.buildx-cache" \
            --tag "${IMAGE_NAME}:latest" \
            --tag "${IMAGE_NAME}:${SONARR_VERSION}" \
            --tag "${IMAGE_NAME}:${SONARR_VERSION_MAJOR}" \
            --tag "${IMAGE_NAME}:${SONARR_VERSION_MINOR}" \
            --build-arg "ALPINE_VERSION=${ALPINE_VERSION}" \
            --build-arg "SONARR_VERSION=${SONARR_VERSION}" \
            --platform="linux/amd64" \
            --output=type="${DOCKER_OUTPUT_TYPE}" \
            .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "failfr8er/sonarr:${{ steps.vars.outputs.SONARR_VERSION }}"
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
